<?php

require_once 'includes/twitter_autopost.inc';
require_once 'includes/twitter_autopost.pages.inc';

/**
 * Implements hook_menu().
 */
function twitter_autopost_menu() {
  $items['admin/config/services/twitter-autopost'] = array(
    'title' => 'Twitter Auto-Post',
    'type' =>  MENU_NORMAL_ITEM,
    'description' => "Twitter Auto post settings",
    'page callback' => 'twitter_autopost_menu_callback',
    'page arguments' => array(''),
    'file' => './includes/twitter_autopost.pages.inc',
    'access arguments' => array('administer twitter autopost'),
  );
  $items['admin/config/services/twitter-autopost-node-settings'] = array(
    'title' => 'Twitter Auto-Post',
    'type' =>  MENU_NORMAL_ITEM,
    'description' => "Twitter Auto post settings",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_autopost_admin_node_settings_form'),
    'file' => './includes/twitter_autopost.pages.inc',
    'access arguments' => array('administer twitter autopost'),
  );
  return $items;
}


/**
 * Menu call back to render the forms.
 */
function twitter_autopost_menu_callback($node) {
  $forms = drupal_render(drupal_get_form('twitter_autopost_admin_account_form'));
  return $forms;
}

/**
 * Implements hook_node_insert().
 */
function twitter_autopost_node_insert($node) {
  twitter_autopost_post_node_to_twitter($node);
}

/**
 * Implements hook_node_update().
 */
function twitter_autopost_node_update($node) {
  twitter_autopost_post_node_to_twitter($node);
}

/**
 * Implements hook_permission().
 */
function twitter_autopost_permission() {
  $perm = array(
    'administer twitter autopost' => array(
      'title' => t('Administer Twitter Autopost'),
    ),
  );
  return $perm;
}

/**
 * Implements hook_form_alter().
 */
function twitter_autopost_form_alter(&$form, &$form_state, $form_id) {
  $node_types = twitter_autopost_node_type_autopost();
  if (in_array($form['type']['#value'], $node_types)) {
    $form['twitter_autopost'] = array(
      '#type' => 'checkbox',
      '#title' => t('Post this content on twitter'),
    );
    $accounts = twitter_autopost_accounts();
    $screen_names = _twitter_autopost_get_accounts(TRUE);
    $form['twitter_autopost_account'] = array(
      '#title' => t('Which Twitter Account to use?'),
      '#type' => 'select',
      '#options' => $screen_names,
    );
  }
}

/**
 * Posts node tweet text to twitter account
 *
 * @param Object $node
 *
 */
function twitter_autopost_post_node_to_twitter($node) {
  if ($node->twitter_autopost == 1) {
    $all_twitter_accounts = _twitter_autopost_get_accounts();
    $selected_twitter_account = $all_twitter_accounts[$node->twitter_autopost_account];
    $twitter_account = '';
    $result = db_query('SELECT twitter_uid FROM twitter_account WHERE screen_name=:selected', array(':selected' => $selected_twitter_account));
    foreach ($result as $account) {
      $twitter_account = twitter_account_load($account->twitter_uid);
    }
    try {
      $message = '';
      $uri = entity_uri('node', $node);
      $node_url = $GLOBALS['base_url'] . '/' . url($uri['path']);
      $tiny_url = twitter_shorten_url($node_url);
      $node_tweet_title = $node->title;
      // Check in case tiny url and node title together are longer than 140
      if ((strlen($node_tweet_title) + strlen($tiny_url)) <= 140) {
        $message = $node_tweet_title . " " . $tiny_url;
      }
      else {
        // If they are calculate how much has to be removed from title text
        $message_length_together = strlen($node_tweet_title) + strlen($tiny_url);
        $amount_to_take_off = $message_length_together - 140;
        $message = substr($node_tweet_title, 0, strlen($node_tweet_title) - $amount_to_take_off) . " " . $tiny_url;
      }
      twitter_set_status($twitter_account, $message);
      drupal_set_message(t('Successfully posted to Twitter'));
    }
    catch (TwitterException $e) {
      drupal_set_message(t('An error occurred when posting to Twitter: @message',
      array('@message' => $e->getMessage())), 'warning');
    }
  }
}

/**
 * Return an array of content types that are used in autopost.
 */
function twitter_autopost_node_type_autopost() {
  $result = db_query('SELECT * FROM twitter_autopost_node_types WHERE use_autopost=1');
  $node_types_autopost = array();
  foreach ($result as $type) {
    array_push($node_types_autopost, $type->node_type);
  }
  return $node_types_autopost;
}

/**
 * Return an array of Twitter Accounts.
 *
 */
function twitter_autopost_accounts() {
  $result = db_query('SELECT screen_name_id, screen_name, is_default FROM twitter_autopost_users');
  $twitter_autopost_accounts = array();
  foreach ($result as $account) {
     array_push($twitter_autopost_accounts, $account);
  }
  return $twitter_autopost_accounts;
}

/**
 * Implements hook_twitter_account_save().
 */
function twitter_autopost_twitter_account_save($twitter_user, $save_auth) {
  twitter_autopost_save_screen_name($twitter_user['screen_name'], $twitter_user['uid'], 0, $twitter_user['twitter_uid']);
}

/**
 * Return an array of Twitter Accounts.
 */
function _twitter_autopost_get_accounts($rendarable = FALSE) {
  $accounts = twitter_autopost_accounts();
    $screen_names = array();
    // Maybe a better way to do this
    foreach ($accounts as $account) {
      if ($account->is_default) {
        if ($rendarable) {
          array_unshift($screen_names, 'Default: (@' . $account->screen_name . ')');
        }
        else {
          array_unshift($screen_names, $account->screen_name);
        }
      }
      else {
        if ($rendarable) {
          array_push($screen_names, '@' . $account->screen_name);
        }
        else {
          array_push($screen_names, $account->screen_name);
        }
      }
    }
  return $screen_names;
}

